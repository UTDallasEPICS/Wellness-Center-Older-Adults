// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]

}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}


model Customer {
  customerID Int @id @default(autoincrement())
  customerEmail String @unique
  firstName String
  middleName String? // make optional
  lastName String
  streetAddress String 
  city String
  state String? // make optional
  birthdate DateTime? // make optional
  customerPhone String
  rides Ride[]
  customerZipCode Int


  @@unique([customerID, firstName, lastName])

}


model Ride {
  rideId Int @id @default(autoincrement())
  //customer Customer @relation(fields: [customerID], references: [id])
  //customerID Int @unique
  customerName String
  
  customerPhone String
  //references employeeID 
  volunteer Volunteer? @relation(fields: [volunteerID], references: [VolunteerID])
  volunteerID Int
  

  customer Customer? @relation(fields: [customerID], references: [customerID])
  customerID Int

  

  date DateTime @db.Date
  startTime DateTime @db.Time(2)
  endTime DateTime @db.Time(2)
  startLocation String
  endLocation String
  status Status @default(AVAILABLE)



}

model Admin {
  AdminID         Int        @id @default(autoincrement())  // Primary Key
  email           String     @unique
  firstName       String
  lastName        String
  phone           String     @unique

  @@unique([AdminID, email])
}

model Employee {
  EmployeeID    Int        @id @default(autoincrement())  // Primary Key
  email         String     @unique
  firstName     String
  lastName      String
  phone         String     @unique
  @@unique([EmployeeID, email])
}

model Volunteer {
  VolunteerID   Int        @id @default(autoincrement())  // Primary Key
  email         String     @unique
  firstName     String
  lastName      String
  phone         String     @unique

  rides         Ride[]  
  @@unique([VolunteerID, email])
}

enum Status{

  COMPLETED
  AVAILABLE
  RESERVED

}

// model Customer {  
//   user User @relation(fields: [customerID], references: [id])
//   customerID Int @id
//   homeAddress String 
//   @@unique([customerID, homeAddress])
// }